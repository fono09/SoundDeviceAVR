
AVRA   Ver. 1.3.0 sound_device.asm Tue Jan 26 17:34:56 2016


         ;
          .include	"m88def.inc"
         ;***** THIS IS A MACHINE GENERATED FILE - DO NOT EDIT ********************
         ;***** Created: 2011-02-09 12:03 ******* Source: ATmega88.xml ************
         ;*************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number            : AVR000
         ;* File Name         : "m88def.inc"
         ;* Title             : Register/Bit Definitions for the ATmega88
         ;* Date              : 2011-02-09
         ;* Version           : 2.35
         ;* Support E-mail    : avr@atmel.com
         ;* Target MCU        : ATmega88
         ;* 
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register 
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and 
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;* 
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in    r16,PORTB             ;read PORTB latch
         ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
         ;* out   PORTB,r16             ;output to PORTB
         ;* 
         ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
         ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
         ;* rjmp  TOV0_is_set           ;jump if set
         ;* ...                         ;otherwise do something else
         ;*************************************************************************
         
          #ifndef _M88DEF_INC_
          #define _M88DEF_INC_
         
         
          #pragma partinc 0
         
         ; ***** SPECIFY DEVICE ***************************************************
          .device ATmega88
          #pragma AVRPART ADMIN PART_NAME ATmega88
          .equ	SIGNATURE_000	= 0x1e
          .equ	SIGNATURE_001	= 0x93
          .equ	SIGNATURE_002	= 0x0a
         
          #pragma AVRPART CORE CORE_VERSION V2E
         
         
         ; ***** I/O REGISTER DEFINITIONS *****************************************
         ; NOTE:
         ; Definitions marked "MEMORY MAPPED"are extended I/O ports
         ; and cannot be used with IN/OUT instructions
          .equ	UDR0	= 0xc6	; MEMORY MAPPED
          .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
          .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
          .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
          .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
          .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
          .equ	TWAMR	= 0xbd	; MEMORY MAPPED
          .equ	TWCR	= 0xbc	; MEMORY MAPPED
          .equ	TWDR	= 0xbb	; MEMORY MAPPED
          .equ	TWAR	= 0xba	; MEMORY MAPPED
          .equ	TWSR	= 0xb9	; MEMORY MAPPED
          .equ	TWBR	= 0xb8	; MEMORY MAPPED
          .equ	ASSR	= 0xb6	; MEMORY MAPPED
          .equ	OCR2B	= 0xb4	; MEMORY MAPPED
          .equ	OCR2A	= 0xb3	; MEMORY MAPPED
          .equ	TCNT2	= 0xb2	; MEMORY MAPPED
          .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
          .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
          .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
          .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
          .equ	OCR1AL	= 0x88	; MEMORY MAPPED
          .equ	OCR1AH	= 0x89	; MEMORY MAPPED
          .equ	ICR1L	= 0x86	; MEMORY MAPPED
          .equ	ICR1H	= 0x87	; MEMORY MAPPED
          .equ	TCNT1L	= 0x84	; MEMORY MAPPED
          .equ	TCNT1H	= 0x85	; MEMORY MAPPED
          .equ	TCCR1C	= 0x82	; MEMORY MAPPED
          .equ	TCCR1B	= 0x81	; MEMORY MAPPED
          .equ	TCCR1A	= 0x80	; MEMORY MAPPED
          .equ	DIDR1	= 0x7f	; MEMORY MAPPED
          .equ	DIDR0	= 0x7e	; MEMORY MAPPED
          .equ	ADMUX	= 0x7c	; MEMORY MAPPED
          .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
          .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
          .equ	ADCH	= 0x79	; MEMORY MAPPED
          .equ	ADCL	= 0x78	; MEMORY MAPPED
          .equ	TIMSK2	= 0x70	; MEMORY MAPPED
          .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
          .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
          .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
          .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
          .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
          .equ	EICRA	= 0x69	; MEMORY MAPPED
          .equ	PCICR	= 0x68	; MEMORY MAPPED
          .equ	OSCCAL	= 0x66	; MEMORY MAPPED
          .equ	PRR	= 0x64	; MEMORY MAPPED
          .equ	CLKPR	= 0x61	; MEMORY MAPPED
          .equ	WDTCSR	= 0x60	; MEMORY MAPPED
          .equ	SREG	= 0x3f
          .equ	SPL	= 0x3d
          .equ	SPH	= 0x3e
          .equ	SPMCSR	= 0x37
          .equ	MCUCR	= 0x35
          .equ	MCUSR	= 0x34
          .equ	SMCR	= 0x33
          .equ	ACSR	= 0x30
          .equ	SPDR	= 0x2e
          .equ	SPSR	= 0x2d
          .equ	SPCR	= 0x2c
          .equ	GPIOR2	= 0x2b
          .equ	GPIOR1	= 0x2a
          .equ	OCR0B	= 0x28
          .equ	OCR0A	= 0x27
          .equ	TCNT0	= 0x26
          .equ	TCCR0B	= 0x25
          .equ	TCCR0A	= 0x24
          .equ	GTCCR	= 0x23
          .equ	EEARH	= 0x22
          .equ	EEARL	= 0x21
          .equ	EEDR	= 0x20
          .equ	EECR	= 0x1f
          .equ	GPIOR0	= 0x1e
          .equ	EIMSK	= 0x1d
          .equ	EIFR	= 0x1c
          .equ	PCIFR	= 0x1b
          .equ	TIFR2	= 0x17
          .equ	TIFR1	= 0x16
          .equ	TIFR0	= 0x15
          .equ	PORTD	= 0x0b
          .equ	DDRD	= 0x0a
          .equ	PIND	= 0x09
          .equ	PORTC	= 0x08
          .equ	DDRC	= 0x07
          .equ	PINC	= 0x06
          .equ	PORTB	= 0x05
          .equ	DDRB	= 0x04
          .equ	PINB	= 0x03
         
         
         ; ***** BIT DEFINITIONS **************************************************
         
         ; ***** USART0 ***********************
         ; UDR0 - USART I/O Data Register
          .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
          .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
          .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
          .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
          .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
          .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
          .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
          .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
         
         ; UCSR0A - USART Control and Status Register A
          .equ	MPCM0	= 0	; Multi-processor Communication Mode
          .equ	U2X0	= 1	; Double the USART transmission speed
          .equ	UPE0	= 2	; Parity Error
          .equ	DOR0	= 3	; Data overRun
          .equ	FE0	= 4	; Framing Error
          .equ	UDRE0	= 5	; USART Data Register Empty
          .equ	TXC0	= 6	; USART Transmitt Complete
          .equ	RXC0	= 7	; USART Receive Complete
         
         ; UCSR0B - USART Control and Status Register B
          .equ	TXB80	= 0	; Transmit Data Bit 8
          .equ	RXB80	= 1	; Receive Data Bit 8
          .equ	UCSZ02	= 2	; Character Size
          .equ	TXEN0	= 3	; Transmitter Enable
          .equ	RXEN0	= 4	; Receiver Enable
          .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
          .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
          .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
         
         ; UCSR0C - USART Control and Status Register C
          .equ	UCPOL0	= 0	; Clock Polarity
          .equ	UCSZ00	= 1	; Character Size
          .equ	UCPHA0	= UCSZ00	; For compatibility
          .equ	UCSZ01	= 2	; Character Size
          .equ	UDORD0	= UCSZ01	; For compatibility
          .equ	USBS0	= 3	; Stop Bit Select
          .equ	UPM00	= 4	; Parity Mode Bit 0
          .equ	UPM01	= 5	; Parity Mode Bit 1
          .equ	UMSEL00	= 6	; USART Mode Select
          .equ	UMSEL0	= UMSEL00	; For compatibility
          .equ	UMSEL01	= 7	; USART Mode Select
          .equ	UMSEL1	= UMSEL01	; For compatibility
         
         ; UBRR0H - USART Baud Rate Register High Byte
          .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
          .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
          .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
          .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
         
         ; UBRR0L - USART Baud Rate Register Low Byte
          .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
          .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
          .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
          .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
          .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
          .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
          .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
          .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
         
         
         ; ***** TWI **************************
         ; TWAMR - TWI (Slave) Address Mask Register
          .equ	TWAM0	= 1	; 
          .equ	TWAMR0	= TWAM0	; For compatibility
          .equ	TWAM1	= 2	; 
          .equ	TWAMR1	= TWAM1	; For compatibility
          .equ	TWAM2	= 3	; 
          .equ	TWAMR2	= TWAM2	; For compatibility
          .equ	TWAM3	= 4	; 
          .equ	TWAMR3	= TWAM3	; For compatibility
          .equ	TWAM4	= 5	; 
          .equ	TWAMR4	= TWAM4	; For compatibility
          .equ	TWAM5	= 6	; 
          .equ	TWAMR5	= TWAM5	; For compatibility
          .equ	TWAM6	= 7	; 
          .equ	TWAMR6	= TWAM6	; For compatibility
         
         ; TWBR - TWI Bit Rate register
          .equ	TWBR0	= 0	; 
          .equ	TWBR1	= 1	; 
          .equ	TWBR2	= 2	; 
          .equ	TWBR3	= 3	; 
          .equ	TWBR4	= 4	; 
          .equ	TWBR5	= 5	; 
          .equ	TWBR6	= 6	; 
          .equ	TWBR7	= 7	; 
         
         ; TWCR - TWI Control Register
          .equ	TWIE	= 0	; TWI Interrupt Enable
          .equ	TWEN	= 2	; TWI Enable Bit
          .equ	TWWC	= 3	; TWI Write Collition Flag
          .equ	TWSTO	= 4	; TWI Stop Condition Bit
          .equ	TWSTA	= 5	; TWI Start Condition Bit
          .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
          .equ	TWINT	= 7	; TWI Interrupt Flag
         
         ; TWSR - TWI Status Register
          .equ	TWPS0	= 0	; TWI Prescaler
          .equ	TWPS1	= 1	; TWI Prescaler
          .equ	TWS3	= 3	; TWI Status
          .equ	TWS4	= 4	; TWI Status
          .equ	TWS5	= 5	; TWI Status
          .equ	TWS6	= 6	; TWI Status
          .equ	TWS7	= 7	; TWI Status
         
         ; TWDR - TWI Data register
          .equ	TWD0	= 0	; TWI Data Register Bit 0
          .equ	TWD1	= 1	; TWI Data Register Bit 1
          .equ	TWD2	= 2	; TWI Data Register Bit 2
          .equ	TWD3	= 3	; TWI Data Register Bit 3
          .equ	TWD4	= 4	; TWI Data Register Bit 4
          .equ	TWD5	= 5	; TWI Data Register Bit 5
          .equ	TWD6	= 6	; TWI Data Register Bit 6
          .equ	TWD7	= 7	; TWI Data Register Bit 7
         
         ; TWAR - TWI (Slave) Address register
          .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
          .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
          .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
          .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
          .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
          .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
          .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
          .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
         
         
         ; ***** TIMER_COUNTER_1 **************
         ; TIMSK1 - Timer/Counter Interrupt Mask Register
          .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
          .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
          .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
          .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
         
         ; TIFR1 - Timer/Counter Interrupt Flag register
          .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
          .equ	OCF1A	= 1	; Output Compare Flag 1A
          .equ	OCF1B	= 2	; Output Compare Flag 1B
          .equ	ICF1	= 5	; Input Capture Flag 1
         
         ; TCCR1A - Timer/Counter1 Control Register A
          .equ	WGM10	= 0	; Waveform Generation Mode
          .equ	WGM11	= 1	; Waveform Generation Mode
          .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
          .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
          .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
          .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
         
         ; TCCR1B - Timer/Counter1 Control Register B
          .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
          .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
          .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
          .equ	WGM12	= 3	; Waveform Generation Mode
          .equ	WGM13	= 4	; Waveform Generation Mode
          .equ	ICES1	= 6	; Input Capture 1 Edge Select
          .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
         
         ; TCCR1C - Timer/Counter1 Control Register C
          .equ	FOC1B	= 6	; 
          .equ	FOC1A	= 7	; 
         
         ; GTCCR - General Timer/Counter Control Register
          .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
          .equ	TSM	= 7	; Timer/Counter Synchronization Mode
         
         
         ; ***** TIMER_COUNTER_2 **************
         ; TIMSK2 - Timer/Counter Interrupt Mask register
          .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
          .equ	TOIE2A	= TOIE2	; For compatibility
          .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
          .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
         
         ; TIFR2 - Timer/Counter Interrupt Flag Register
          .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
          .equ	OCF2A	= 1	; Output Compare Flag 2A
          .equ	OCF2B	= 2	; Output Compare Flag 2B
         
         ; TCCR2A - Timer/Counter2 Control Register A
          .equ	WGM20	= 0	; Waveform Genration Mode
          .equ	WGM21	= 1	; Waveform Genration Mode
          .equ	COM2B0	= 4	; Compare Output Mode bit 0
          .equ	COM2B1	= 5	; Compare Output Mode bit 1
          .equ	COM2A0	= 6	; Compare Output Mode bit 1
          .equ	COM2A1	= 7	; Compare Output Mode bit 1
         
         ; TCCR2B - Timer/Counter2 Control Register B
          .equ	CS20	= 0	; Clock Select bit 0
          .equ	CS21	= 1	; Clock Select bit 1
          .equ	CS22	= 2	; Clock Select bit 2
          .equ	WGM22	= 3	; Waveform Generation Mode
          .equ	FOC2B	= 6	; Force Output Compare B
          .equ	FOC2A	= 7	; Force Output Compare A
         
         ; TCNT2 - Timer/Counter2
          .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
          .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
          .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
          .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
          .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
          .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
          .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
          .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
         
         ; OCR2A - Timer/Counter2 Output Compare Register A
          .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
          .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
          .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
          .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
          .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
          .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
          .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
          .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
         
         ; OCR2B - Timer/Counter2 Output Compare Register B
          .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
          .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
          .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
          .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
          .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
          .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
          .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
          .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
         
         ; ASSR - Asynchronous Status Register
          .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
          .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
          .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
          .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
          .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
          .equ	AS2	= 5	; Asynchronous Timer/Counter2
          .equ	EXCLK	= 6	; Enable External Clock Input
         
         ; GTCCR - General Timer Counter Control register
          .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
          .equ	PSR2	= PSRASY	; For compatibility
         ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
         
         
         ; ***** AD_CONVERTER *****************
         ; ADMUX - The ADC multiplexer Selection Register
          .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
          .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
          .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
          .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
          .equ	ADLAR	= 5	; Left Adjust Result
          .equ	REFS0	= 6	; Reference Selection Bit 0
          .equ	REFS1	= 7	; Reference Selection Bit 1
         
         ; ADCSRA - The ADC Control and Status register A
          .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
          .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
          .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
          .equ	ADIE	= 3	; ADC Interrupt Enable
          .equ	ADIF	= 4	; ADC Interrupt Flag
          .equ	ADATE	= 5	; ADC  Auto Trigger Enable
          .equ	ADSC	= 6	; ADC Start Conversion
          .equ	ADEN	= 7	; ADC Enable
         
         ; ADCSRB - The ADC Control and Status register B
          .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
          .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
          .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
          .equ	ACME	= 6	; 
         
         ; ADCH - ADC Data Register High Byte
          .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
          .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
          .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
          .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
          .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
          .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
          .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
          .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
         
         ; ADCL - ADC Data Register Low Byte
          .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
          .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
          .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
          .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
          .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
          .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
          .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
          .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
         
         ; DIDR0 - Digital Input Disable Register
          .equ	ADC0D	= 0	; 
          .equ	ADC1D	= 1	; 
          .equ	ADC2D	= 2	; 
          .equ	ADC3D	= 3	; 
          .equ	ADC4D	= 4	; 
          .equ	ADC5D	= 5	; 
         
         
         ; ***** ANALOG_COMPARATOR ************
         ; ACSR - Analog Comparator Control And Status Register
          .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
          .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
          .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
          .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
          .equ	ACI	= 4	; Analog Comparator Interrupt Flag
          .equ	ACO	= 5	; Analog Compare Output
          .equ	ACBG	= 6	; Analog Comparator Bandgap Select
          .equ	ACD	= 7	; Analog Comparator Disable
         
         ; DIDR1 - Digital Input Disable Register 1
          .equ	AIN0D	= 0	; AIN0 Digital Input Disable
          .equ	AIN1D	= 1	; AIN1 Digital Input Disable
         
         
         ; ***** PORTB ************************
         ; PORTB - Port B Data Register
          .equ	PORTB0	= 0	; Port B Data Register bit 0
          .equ	PB0	= 0	; For compatibility
          .equ	PORTB1	= 1	; Port B Data Register bit 1
          .equ	PB1	= 1	; For compatibility
          .equ	PORTB2	= 2	; Port B Data Register bit 2
          .equ	PB2	= 2	; For compatibility
          .equ	PORTB3	= 3	; Port B Data Register bit 3
          .equ	PB3	= 3	; For compatibility
          .equ	PORTB4	= 4	; Port B Data Register bit 4
          .equ	PB4	= 4	; For compatibility
          .equ	PORTB5	= 5	; Port B Data Register bit 5
          .equ	PB5	= 5	; For compatibility
          .equ	PORTB6	= 6	; Port B Data Register bit 6
          .equ	PB6	= 6	; For compatibility
          .equ	PORTB7	= 7	; Port B Data Register bit 7
          .equ	PB7	= 7	; For compatibility
         
         ; DDRB - Port B Data Direction Register
          .equ	DDB0	= 0	; Port B Data Direction Register bit 0
          .equ	DDB1	= 1	; Port B Data Direction Register bit 1
          .equ	DDB2	= 2	; Port B Data Direction Register bit 2
          .equ	DDB3	= 3	; Port B Data Direction Register bit 3
          .equ	DDB4	= 4	; Port B Data Direction Register bit 4
          .equ	DDB5	= 5	; Port B Data Direction Register bit 5
          .equ	DDB6	= 6	; Port B Data Direction Register bit 6
          .equ	DDB7	= 7	; Port B Data Direction Register bit 7
         
         ; PINB - Port B Input Pins
          .equ	PINB0	= 0	; Port B Input Pins bit 0
          .equ	PINB1	= 1	; Port B Input Pins bit 1
          .equ	PINB2	= 2	; Port B Input Pins bit 2
          .equ	PINB3	= 3	; Port B Input Pins bit 3
          .equ	PINB4	= 4	; Port B Input Pins bit 4
          .equ	PINB5	= 5	; Port B Input Pins bit 5
          .equ	PINB6	= 6	; Port B Input Pins bit 6
          .equ	PINB7	= 7	; Port B Input Pins bit 7
         
         
         ; ***** PORTC ************************
         ; PORTC - Port C Data Register
          .equ	PORTC0	= 0	; Port C Data Register bit 0
          .equ	PC0	= 0	; For compatibility
          .equ	PORTC1	= 1	; Port C Data Register bit 1
          .equ	PC1	= 1	; For compatibility
          .equ	PORTC2	= 2	; Port C Data Register bit 2
          .equ	PC2	= 2	; For compatibility
          .equ	PORTC3	= 3	; Port C Data Register bit 3
          .equ	PC3	= 3	; For compatibility
          .equ	PORTC4	= 4	; Port C Data Register bit 4
          .equ	PC4	= 4	; For compatibility
          .equ	PORTC5	= 5	; Port C Data Register bit 5
          .equ	PC5	= 5	; For compatibility
          .equ	PORTC6	= 6	; Port C Data Register bit 6
          .equ	PC6	= 6	; For compatibility
         
         ; DDRC - Port C Data Direction Register
          .equ	DDC0	= 0	; Port C Data Direction Register bit 0
          .equ	DDC1	= 1	; Port C Data Direction Register bit 1
          .equ	DDC2	= 2	; Port C Data Direction Register bit 2
          .equ	DDC3	= 3	; Port C Data Direction Register bit 3
          .equ	DDC4	= 4	; Port C Data Direction Register bit 4
          .equ	DDC5	= 5	; Port C Data Direction Register bit 5
          .equ	DDC6	= 6	; Port C Data Direction Register bit 6
         
         ; PINC - Port C Input Pins
          .equ	PINC0	= 0	; Port C Input Pins bit 0
          .equ	PINC1	= 1	; Port C Input Pins bit 1
          .equ	PINC2	= 2	; Port C Input Pins bit 2
          .equ	PINC3	= 3	; Port C Input Pins bit 3
          .equ	PINC4	= 4	; Port C Input Pins bit 4
          .equ	PINC5	= 5	; Port C Input Pins bit 5
          .equ	PINC6	= 6	; Port C Input Pins bit 6
         
         
         ; ***** PORTD ************************
         ; PORTD - Port D Data Register
          .equ	PORTD0	= 0	; Port D Data Register bit 0
          .equ	PD0	= 0	; For compatibility
          .equ	PORTD1	= 1	; Port D Data Register bit 1
          .equ	PD1	= 1	; For compatibility
          .equ	PORTD2	= 2	; Port D Data Register bit 2
          .equ	PD2	= 2	; For compatibility
          .equ	PORTD3	= 3	; Port D Data Register bit 3
          .equ	PD3	= 3	; For compatibility
          .equ	PORTD4	= 4	; Port D Data Register bit 4
          .equ	PD4	= 4	; For compatibility
          .equ	PORTD5	= 5	; Port D Data Register bit 5
          .equ	PD5	= 5	; For compatibility
          .equ	PORTD6	= 6	; Port D Data Register bit 6
          .equ	PD6	= 6	; For compatibility
          .equ	PORTD7	= 7	; Port D Data Register bit 7
          .equ	PD7	= 7	; For compatibility
         
         ; DDRD - Port D Data Direction Register
          .equ	DDD0	= 0	; Port D Data Direction Register bit 0
          .equ	DDD1	= 1	; Port D Data Direction Register bit 1
          .equ	DDD2	= 2	; Port D Data Direction Register bit 2
          .equ	DDD3	= 3	; Port D Data Direction Register bit 3
          .equ	DDD4	= 4	; Port D Data Direction Register bit 4
          .equ	DDD5	= 5	; Port D Data Direction Register bit 5
          .equ	DDD6	= 6	; Port D Data Direction Register bit 6
          .equ	DDD7	= 7	; Port D Data Direction Register bit 7
         
         ; PIND - Port D Input Pins
          .equ	PIND0	= 0	; Port D Input Pins bit 0
          .equ	PIND1	= 1	; Port D Input Pins bit 1
          .equ	PIND2	= 2	; Port D Input Pins bit 2
          .equ	PIND3	= 3	; Port D Input Pins bit 3
          .equ	PIND4	= 4	; Port D Input Pins bit 4
          .equ	PIND5	= 5	; Port D Input Pins bit 5
          .equ	PIND6	= 6	; Port D Input Pins bit 6
          .equ	PIND7	= 7	; Port D Input Pins bit 7
         
         
         ; ***** TIMER_COUNTER_0 **************
         ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
          .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
          .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
          .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
         
         ; TIFR0 - Timer/Counter0 Interrupt Flag register
          .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
          .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
          .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
         
         ; TCCR0A - Timer/Counter  Control Register A
          .equ	WGM00	= 0	; Waveform Generation Mode
          .equ	WGM01	= 1	; Waveform Generation Mode
          .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
          .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
          .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
          .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
         
         ; TCCR0B - Timer/Counter Control Register B
          .equ	CS00	= 0	; Clock Select
          .equ	CS01	= 1	; Clock Select
          .equ	CS02	= 2	; Clock Select
          .equ	WGM02	= 3	; 
          .equ	FOC0B	= 6	; Force Output Compare B
          .equ	FOC0A	= 7	; Force Output Compare A
         
         ; TCNT0 - Timer/Counter0
          .equ	TCNT0_0	= 0	; 
          .equ	TCNT0_1	= 1	; 
          .equ	TCNT0_2	= 2	; 
          .equ	TCNT0_3	= 3	; 
          .equ	TCNT0_4	= 4	; 
          .equ	TCNT0_5	= 5	; 
          .equ	TCNT0_6	= 6	; 
          .equ	TCNT0_7	= 7	; 
         
         ; OCR0A - Timer/Counter0 Output Compare Register
          .equ	OCR0A_0	= 0	; 
          .equ	OCR0A_1	= 1	; 
          .equ	OCR0A_2	= 2	; 
          .equ	OCR0A_3	= 3	; 
          .equ	OCR0A_4	= 4	; 
          .equ	OCR0A_5	= 5	; 
          .equ	OCR0A_6	= 6	; 
          .equ	OCR0A_7	= 7	; 
         
         ; OCR0B - Timer/Counter0 Output Compare Register
          .equ	OCR0B_0	= 0	; 
          .equ	OCR0B_1	= 1	; 
          .equ	OCR0B_2	= 2	; 
          .equ	OCR0B_3	= 3	; 
          .equ	OCR0B_4	= 4	; 
          .equ	OCR0B_5	= 5	; 
          .equ	OCR0B_6	= 6	; 
          .equ	OCR0B_7	= 7	; 
         
         ; GTCCR - General Timer/Counter Control Register
         ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
          .equ	PSR10	= PSRSYNC	; For compatibility
         ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
         
         
         ; ***** EXTERNAL_INTERRUPT ***********
         ; EICRA - External Interrupt Control Register
          .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
          .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
          .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
          .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
         
         ; EIMSK - External Interrupt Mask Register
          .equ	INT0	= 0	; External Interrupt Request 0 Enable
          .equ	INT1	= 1	; External Interrupt Request 1 Enable
         
         ; EIFR - External Interrupt Flag Register
          .equ	INTF0	= 0	; External Interrupt Flag 0
          .equ	INTF1	= 1	; External Interrupt Flag 1
         
         ; PCICR - Pin Change Interrupt Control Register
          .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
          .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
          .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
         
         ; PCMSK2 - Pin Change Mask Register 2
          .equ	PCINT16	= 0	; Pin Change Enable Mask 16
          .equ	PCINT17	= 1	; Pin Change Enable Mask 17
          .equ	PCINT18	= 2	; Pin Change Enable Mask 18
          .equ	PCINT19	= 3	; Pin Change Enable Mask 19
          .equ	PCINT20	= 4	; Pin Change Enable Mask 20
          .equ	PCINT21	= 5	; Pin Change Enable Mask 21
          .equ	PCINT22	= 6	; Pin Change Enable Mask 22
          .equ	PCINT23	= 7	; Pin Change Enable Mask 23
         
         ; PCMSK1 - Pin Change Mask Register 1
          .equ	PCINT8	= 0	; Pin Change Enable Mask 8
          .equ	PCINT9	= 1	; Pin Change Enable Mask 9
          .equ	PCINT10	= 2	; Pin Change Enable Mask 10
          .equ	PCINT11	= 3	; Pin Change Enable Mask 11
          .equ	PCINT12	= 4	; Pin Change Enable Mask 12
          .equ	PCINT13	= 5	; Pin Change Enable Mask 13
          .equ	PCINT14	= 6	; Pin Change Enable Mask 14
         
         ; PCMSK0 - Pin Change Mask Register 0
          .equ	PCINT0	= 0	; Pin Change Enable Mask 0
          .equ	PCINT1	= 1	; Pin Change Enable Mask 1
          .equ	PCINT2	= 2	; Pin Change Enable Mask 2
          .equ	PCINT3	= 3	; Pin Change Enable Mask 3
          .equ	PCINT4	= 4	; Pin Change Enable Mask 4
          .equ	PCINT5	= 5	; Pin Change Enable Mask 5
          .equ	PCINT6	= 6	; Pin Change Enable Mask 6
          .equ	PCINT7	= 7	; Pin Change Enable Mask 7
         
         ; PCIFR - Pin Change Interrupt Flag Register
          .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
          .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
          .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
         
         
         ; ***** SPI **************************
         ; SPDR - SPI Data Register
          .equ	SPDR0	= 0	; SPI Data Register bit 0
          .equ	SPDR1	= 1	; SPI Data Register bit 1
          .equ	SPDR2	= 2	; SPI Data Register bit 2
          .equ	SPDR3	= 3	; SPI Data Register bit 3
          .equ	SPDR4	= 4	; SPI Data Register bit 4
          .equ	SPDR5	= 5	; SPI Data Register bit 5
          .equ	SPDR6	= 6	; SPI Data Register bit 6
          .equ	SPDR7	= 7	; SPI Data Register bit 7
         
         ; SPSR - SPI Status Register
          .equ	SPI2X	= 0	; Double SPI Speed Bit
          .equ	WCOL	= 6	; Write Collision Flag
          .equ	SPIF	= 7	; SPI Interrupt Flag
         
         ; SPCR - SPI Control Register
          .equ	SPR0	= 0	; SPI Clock Rate Select 0
          .equ	SPR1	= 1	; SPI Clock Rate Select 1
          .equ	CPHA	= 2	; Clock Phase
          .equ	CPOL	= 3	; Clock polarity
          .equ	MSTR	= 4	; Master/Slave Select
          .equ	DORD	= 5	; Data Order
          .equ	SPE	= 6	; SPI Enable
          .equ	SPIE	= 7	; SPI Interrupt Enable
         
         
         ; ***** CPU **************************
         ; SREG - Status Register
          .equ	SREG_C	= 0	; Carry Flag
          .equ	SREG_Z	= 1	; Zero Flag
          .equ	SREG_N	= 2	; Negative Flag
          .equ	SREG_V	= 3	; Two's Complement Overflow Flag
          .equ	SREG_S	= 4	; Sign Bit
          .equ	SREG_H	= 5	; Half Carry Flag
          .equ	SREG_T	= 6	; Bit Copy Storage
          .equ	SREG_I	= 7	; Global Interrupt Enable
         
         ; OSCCAL - Oscillator Calibration Value
          .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
          .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
          .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
          .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
          .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
          .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
          .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
          .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
         
         ; CLKPR - Clock Prescale Register
          .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
          .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
          .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
          .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
          .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
         
         ; SPMCSR - Store Program Memory Control and Status Register
          .equ	SELFPRGEN	= 0	; Self Programming Enable
          .equ	PGERS	= 1	; Page Erase
          .equ	PGWRT	= 2	; Page Write
          .equ	BLBSET	= 3	; Boot Lock Bit Set
          .equ	RWWSRE	= 4	; Read-While-Write section read enable
          .equ	RWWSB	= 6	; Read-While-Write Section Busy
          .equ	SPMIE	= 7	; SPM Interrupt Enable
         
         ; MCUCR - MCU Control Register
          .equ	IVCE	= 0	; 
          .equ	IVSEL	= 1	; 
          .equ	PUD	= 4	; 
         
         ; MCUSR - MCU Status Register
          .equ	PORF	= 0	; Power-on reset flag
          .equ	EXTRF	= 1	; External Reset Flag
          .equ	EXTREF	= EXTRF	; For compatibility
          .equ	BORF	= 2	; Brown-out Reset Flag
          .equ	WDRF	= 3	; Watchdog Reset Flag
         
         ; SMCR - 
          .equ	SE	= 0	; 
          .equ	SM0	= 1	; 
          .equ	SM1	= 2	; 
          .equ	SM2	= 3	; 
         
         ; GPIOR2 - General Purpose I/O Register 2
          .equ	GPIOR20	= 0	; 
          .equ	GPIOR21	= 1	; 
          .equ	GPIOR22	= 2	; 
          .equ	GPIOR23	= 3	; 
          .equ	GPIOR24	= 4	; 
          .equ	GPIOR25	= 5	; 
          .equ	GPIOR26	= 6	; 
          .equ	GPIOR27	= 7	; 
         
         ; GPIOR1 - General Purpose I/O Register 1
          .equ	GPIOR10	= 0	; 
          .equ	GPIOR11	= 1	; 
          .equ	GPIOR12	= 2	; 
          .equ	GPIOR13	= 3	; 
          .equ	GPIOR14	= 4	; 
          .equ	GPIOR15	= 5	; 
          .equ	GPIOR16	= 6	; 
          .equ	GPIOR17	= 7	; 
         
         ; GPIOR0 - General Purpose I/O Register 0
          .equ	GPIOR00	= 0	; 
          .equ	GPIOR01	= 1	; 
          .equ	GPIOR02	= 2	; 
          .equ	GPIOR03	= 3	; 
          .equ	GPIOR04	= 4	; 
          .equ	GPIOR05	= 5	; 
          .equ	GPIOR06	= 6	; 
          .equ	GPIOR07	= 7	; 
         
         ; PRR - Power Reduction Register
          .equ	PRADC	= 0	; Power Reduction ADC
          .equ	PRUSART0	= 1	; Power Reduction USART
          .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
          .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
          .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
          .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
          .equ	PRTWI	= 7	; Power Reduction TWI
         
         
         ; ***** WATCHDOG *********************
         ; WDTCSR - Watchdog Timer Control Register
          .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
          .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
          .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
          .equ	WDE	= 3	; Watch Dog Enable
          .equ	WDCE	= 4	; Watchdog Change Enable
          .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
          .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
          .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
         
         
         ; ***** EEPROM ***********************
         ; EEARL - EEPROM Address Register Low Byte
          .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
          .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
          .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
          .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
          .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
          .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
          .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
          .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
         
         ; EEARH - EEPROM Address Register High Byte
          .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 0
         
         ; EEDR - EEPROM Data Register
          .equ	EEDR0	= 0	; EEPROM Data Register bit 0
          .equ	EEDR1	= 1	; EEPROM Data Register bit 1
          .equ	EEDR2	= 2	; EEPROM Data Register bit 2
          .equ	EEDR3	= 3	; EEPROM Data Register bit 3
          .equ	EEDR4	= 4	; EEPROM Data Register bit 4
          .equ	EEDR5	= 5	; EEPROM Data Register bit 5
          .equ	EEDR6	= 6	; EEPROM Data Register bit 6
          .equ	EEDR7	= 7	; EEPROM Data Register bit 7
         
         ; EECR - EEPROM Control Register
          .equ	EERE	= 0	; EEPROM Read Enable
          .equ	EEPE	= 1	; EEPROM Write Enable
          .equ	EEMPE	= 2	; EEPROM Master Write Enable
          .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
          .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
          .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
         
         
         
         ; ***** LOCKSBITS ********************************************************
          .equ	LB1	= 0	; Lock bit
          .equ	LB2	= 1	; Lock bit
          .equ	BLB01	= 2	; Boot Lock bit
          .equ	BLB02	= 3	; Boot Lock bit
          .equ	BLB11	= 4	; Boot lock bit
          .equ	BLB12	= 5	; Boot lock bit
         
         
         ; ***** FUSES ************************************************************
         ; LOW fuse bits
          .equ	CKSEL0	= 0	; Select Clock Source
          .equ	CKSEL1	= 1	; Select Clock Source
          .equ	CKSEL2	= 2	; Select Clock Source
          .equ	CKSEL3	= 3	; Select Clock Source
          .equ	SUT0	= 4	; Select start-up time
          .equ	SUT1	= 5	; Select start-up time
          .equ	CKOUT	= 6	; Clock output
          .equ	CKDIV8	= 7	; Divide clock by 8
         
         ; HIGH fuse bits
          .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
          .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
          .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
          .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
          .equ	WDTON	= 4	; Watchdog Timer Always On
          .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
          .equ	DWEN	= 6	; debugWIRE Enable
          .equ	RSTDISBL	= 7	; External reset disable
         
         ; EXTENDED fuse bits
          .equ	BOOTRST	= 0	; Select reset vector
          .equ	BOOTSZ0	= 1	; Select boot size
          .equ	BOOTSZ1	= 2	; Select boot size
         
         
         
         ; ***** CPU REGISTER DEFINITIONS *****************************************
          .def	XH	= r27
          .def	XL	= r26
          .def	YH	= r29
          .def	YL	= r28
          .def	ZH	= r31
          .def	ZL	= r30
         
         
         
         ; ***** DATA MEMORY DECLARATIONS *****************************************
          .equ	FLASHEND	= 0x0fff	; Note: Word address
          .equ	IOEND	= 0x00ff
          .equ	SRAM_START	= 0x0100
          .equ	SRAM_SIZE	= 1024
          .equ	RAMEND	= 0x04ff
          .equ	XRAMEND	= 0x0000
          .equ	E2END	= 0x01ff
          .equ	EEPROMEND	= 0x01ff
          .equ	EEADRBITS	= 9
          #pragma AVRPART MEMORY PROG_FLASH 8192
          #pragma AVRPART MEMORY EEPROM 512
          #pragma AVRPART MEMORY INT_SRAM SIZE 1024
          #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
         
         
         
         ; ***** BOOTLOADER DECLARATIONS ******************************************
          .equ	NRWW_START_ADDR	= 0xc00
          .equ	NRWW_STOP_ADDR	= 0xfff
          .equ	RWW_START_ADDR	= 0x0
          .equ	RWW_STOP_ADDR	= 0xbff
          .equ	PAGESIZE	= 32
          .equ	FIRSTBOOTSTART	= 0xf80
          .equ	SECONDBOOTSTART	= 0xf00
          .equ	THIRDBOOTSTART	= 0xe00
          .equ	FOURTHBOOTSTART	= 0xc00
          .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
          .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
         
         
         
         ; ***** INTERRUPT VECTORS ************************************************
          .equ	INT0addr	= 0x0001	; External Interrupt Request 0
          .equ	INT1addr	= 0x0002	; External Interrupt Request 1
          .equ	PCI0addr	= 0x0003	; Pin Change Interrupt Request 0
          .equ	PCI1addr	= 0x0004	; Pin Change Interrupt Request 0
          .equ	PCI2addr	= 0x0005	; Pin Change Interrupt Request 1
          .equ	WDTaddr	= 0x0006	; Watchdog Time-out Interrupt
          .equ	OC2Aaddr	= 0x0007	; Timer/Counter2 Compare Match A
          .equ	OC2Baddr	= 0x0008	; Timer/Counter2 Compare Match A
          .equ	OVF2addr	= 0x0009	; Timer/Counter2 Overflow
          .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
          .equ	OC1Aaddr	= 0x000b	; Timer/Counter1 Compare Match A
          .equ	OC1Baddr	= 0x000c	; Timer/Counter1 Compare Match B
          .equ	OVF1addr	= 0x000d	; Timer/Counter1 Overflow
          .equ	OC0Aaddr	= 0x000e	; TimerCounter0 Compare Match A
          .equ	OC0Baddr	= 0x000f	; TimerCounter0 Compare Match B
          .equ	OVF0addr	= 0x0010	; Timer/Couner0 Overflow
          .equ	SPIaddr	= 0x0011	; SPI Serial Transfer Complete
          .equ	URXCaddr	= 0x0012	; USART Rx Complete
          .equ	UDREaddr	= 0x0013	; USART, Data Register Empty
          .equ	UTXCaddr	= 0x0014	; USART Tx Complete
          .equ	ADCCaddr	= 0x0015	; ADC Conversion Complete
          .equ	ERDYaddr	= 0x0016	; EEPROM Ready
          .equ	ACIaddr	= 0x0017	; Analog Comparator
          .equ	TWIaddr	= 0x0018	; Two-wire Serial Interface
          .equ	SPMRaddr	= 0x0019	; Store Program Memory Read
         
          .equ	INT_VECTORS_SIZE	= 26	; size in words
         
          #endif  /* _M88DEF_INC_ */
         
         ; ***** END OF FILE ******************************************************
          "
         ;register
          .def	NN0	=r16	;ノートナンバー0
          .def	TC0	=r17	;音色0
          .def	WV0	=r18	;波形値0
         ;
          .def	NN1	=r19	;ノートナンバー1
          .def	TC1	=r20	;音色1
          .def	WV1	=r21	;波形値1
         ;
          .def	SPK	=r22	;スピーカー出力値
         ;
          .def	temp	=r23	;テンポラリレジスタ
          .def	itemp	=r24	;割り込み内テンポラリレジスタ
          .def	us_data	=r25	;USART送受信データ
         ;
         ;boudrate definition
          .equ	BRH	=0x4
          .equ	BRL	=0x11
          .equ	ACK	=0x1
          .equ	NACK	=0x0	
          .equ	SAMPLES =0xFF
         ;
         ;vector area
          	.cseg
C:000000 c05e      	rjmp	reset   ;  reset vector
C:000001 9518      	reti            ;  INT0  vector
C:000002 9518      	reti		;  INT1  vector
C:000003 9518      	reti		;  PCINT0
C:000004 9518      	reti		;  PCINT1
C:000005 9518      	reti		;  PCINT2
C:000006 9518      	reti		;  WDT
C:000007 c012      	rjmp	t2cmp	;  Timer2 COMPA
C:000008 9518      	reti		;  Timer2 COMPB
C:000009 9518      	reti		;  Timer2 overflow
C:00000a 9518      	reti		;  Timer1 capture
C:00000b c021      	rjmp	t1cmp	;  Timer1 COMPA
C:00000c 9518      	reti		;  Timer1 COMPB
C:00000d 9518      	reti		;  Timer1 overflow
C:00000e 9518      	reti		;  Timer0 COMPA
C:00000f 9518      	reti		;  Timer0 COMPB
C:000010 9518      	reti		;  Timer0 overflow
C:000011 9518      	reti		;  SPI STC
C:000012 c02d      	rjmp	usartrx	;  USART/Rx complete
C:000013 9518      	reti		;  USART/ Data register empty
C:000014 9518      	reti		;  USART/Tx complete
C:000015 9518      	reti		;  ADC
C:000016 9518      	reti		;  EEPROM EE_RDY
C:000017 9518      	reti		;  Analog comparator
C:000018 9518      	reti		;  TWI
C:000019 9518      	reti		;  SPM_RDY
         ;
         ;Timer2 cmp
          t2cmp:
C:00001a b78f      	in	itemp, SREG
C:00001b 938f      	push	itemp
C:00001c 9621      	adiw	YL,1
C:00001d 30d2      	cpi	YH,high(tone*2+SAMPLES)
C:00001e f411      	brne	t2cmp_end
C:00001f e0d1      	ldi	YH,high(tone*2)
C:000020 e2ca      	ldi	YL,low(tone*2)
          t2cmp_end:
C:000021 e080      	ldi	itemp,0
C:000022 bd87      	out	OCR0A,itemp
C:000023 8188      	ld	itemp,Y
C:000024 9586      	lsr	itemp
C:000025 bd87      	out	OCR0A,itemp
C:000026 8170      	ld	temp,Z
C:000027 9576      	lsr	temp
C:000028 0f87      	add	itemp,temp
C:000029 bd87      	out	OCR0A,itemp
C:00002a 918f      	pop	itemp
C:00002b bf8f      	out	SREG, itemp
C:00002c 9518      	reti
         ;
         ;Timer1 cmp
          t1cmp:
C:00002d b78f      	in	itemp, SREG
C:00002e 938f      	push	itemp
C:00002f 9631      	adiw	ZL,1
C:000030 30f2      	cpi	ZH,high(tone*2+SAMPLES+1)
C:000031 f411      	brne	t1cmp_end
C:000032 e0f1      	ldi	ZH,high(tone*2+1)
C:000033 e2ea      	ldi	ZL,low(tone*2)
          t1cmp_end:
C:000034 e080      	ldi	itemp,0
C:000035 bd87      	out	OCR0A,itemp
C:000036 8188      	ld	itemp,Y
C:000037 9586      	lsr	itemp
C:000038 bd87      	out	OCR0A,itemp
C:000039 8170      	ld	temp,Z
C:00003a 9576      	lsr	temp
C:00003b 0f87      	add	itemp,temp
C:00003c bd87      	out	OCR0A,itemp
C:00003d 918f      	pop	itemp
C:00003e bf8f      	out	SREG, itemp
C:00003f 9518      	reti
         ;usart rx interrupt
          usartrx:
C:000040 b78f      	in	itemp, SREG
C:000041 938f      	push	itemp
C:000042 94f8      	cli
C:000043 9190 00c6 	lds	us_data, UDR0
C:000045 939d      	st	X+, us_data
          Txa:
C:000046 9180 00c0 	lds	itemp, UCSR0A
C:000048 ff85      	sbrs	itemp, UDRE0
C:000049 cffc      	rjmp	Txa
C:00004a 9390 00c6 	sts	UDR0,  us_data
C:00004c 3490      	cpi	us_data, 0x40 ;'@'
C:00004d f469      	brne	usartend
C:00004e e0b1      	ldi	XH, 0x01
C:00004f e0a0      	ldi	XL, 0x00
          Txb:
C:000050 9180 00c0 	lds	itemp, UCSR0A
C:000052 ff85      	sbrs	itemp, UDRE0
C:000053 cffc      	rjmp 	Txb
C:000054 9370 00c6 	sts	UDR0, temp
C:000056 917d      	ld	temp, X+
C:000057 3470      	cpi	temp, 0x40 ;'@'
C:000058 f7b9      	brne	Txb
C:000059 e0b1      	ldi	XH, 0x01
C:00005a e0a0      	ldi	XL, 0x00
          usartend:
C:00005b 918f      	pop	itemp
C:00005c bf8f      	out	SREG, itemp
C:00005d 9478      	sei
C:00005e 9518      	reti
         ;
         ;reset routine
          reset:
         ; set stuck pointer
C:00005f e074      	ldi	temp, high(RAMEND)
C:000060 bf7e      	out	SPH, temp
C:000061 ef7f      	ldi	temp, low(RAMEND)
C:000062 bf7d      	out	SPL, temp
         ; set DDRB
C:000063 ef7f      	ldi	temp, 0b11111111
C:000064 b974      	out	DDRB, temp
         ; set DDRD
C:000065 ef70      	ldi	temp, 0b11110000
C:000066 b97a      	out	DDRD, temp
         ; set PORTD pull up
C:000067 ef70      	ldi	temp, 0b11110000
C:000068 b97b      	out	PORTD, temp
         ; set Timer0 8bit-FastPWM
C:000069 e872      	ldi	temp, 0b10000010
C:00006a bd74      	out	TCCR0A, temp
C:00006b e071      	ldi	temp, 0b00000001
C:00006c bd75      	out	TCCR0B,temp
C:00006d e077      	ldi	temp, 0b00000111
C:00006e 9370 006e 	sts	TIMSK0, temp
         ; set Timer1 CTC 
C:000070 e070      	ldi	temp, 0b00000000
C:000071 9370 0080 	sts	TCCR1A, temp
C:000073 e079      	ldi	temp, 0b00001001
C:000074 9370 0081 	sts	TCCR1B, temp
C:000076 e077      	ldi	temp, 0b00000111
C:000077 9370 006f 	sts	TIMSK1, temp
         ; set Timer2 CTC
C:000079 e072      	ldi	temp, 0b00000010
C:00007a 9370 00b0 	sts	TCCR2A, temp
C:00007c e071      	ldi	temp, 0b00000001
C:00007d 9370 00b1 	sts	TCCR2B, temp
C:00007f e077      	ldi	temp, 0b00000111
C:000080 9370 0070 	sts	TIMSK2, temp
         ; set default tone
C:000082 e060      	ldi	SPK, 0
C:000083 e0d1      	ldi	YH,high(tone*2)
C:000084 e2ca      	ldi	YL,low(tone*2)
         ;
         ;
C:000085 e074      	ldi	temp,BRH
C:000086 9370 00c5 	sts	UBRR0H,temp
C:000088 e171      	ldi	temp,BRL
C:000089 9370 00c4 	sts	UBRR0L,temp
C:00008b e978      	ldi	temp,0b10011000
C:00008c 9370 00c1 	sts	UCSR0B,temp
C:00008e e076      	ldi	temp,0b00000110
C:00008f 9370 00c2 	sts	UCSR0C,temp
C:000091 e0b1      	ldi	XH, 0x01
C:000092 e0a0      	ldi	XL, 0x00
C:000093 9478      	sei
         ;
         ;
         ;
          main:
C:000094 cfff      	rjmp	main
         ;
          tone:
         ;正弦波
          .db 0x80, 0x83, 0x86, 0x89, 0x8c, 0x8f, 0x92, 0x95
C:000095 808386898C8F9295
          .db 0x98, 0x9c, 0x9f, 0xa2, 0xa5, 0xa8, 0xab, 0xae
C:000099 989C9FA2A5A8ABAE
          .db 0xb0, 0xb3, 0xb6, 0xb9, 0xbc, 0xbf, 0xc1, 0xc4
C:00009D B0B3B6B9BCBFC1C4
          .db 0xc7, 0xc9, 0xcc, 0xce, 0xd1, 0xd3, 0xd5, 0xd8
C:0000A1 C7C9CCCED1D3D5D8
          .db 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8
C:0000A5 DADCDEE0E2E4E6E8
          .db 0xea, 0xec, 0xed, 0xef, 0xf0, 0xf2, 0xf3, 0xf5
C:0000A9 EAECEDEFF0F2F3F5
          .db 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfc
C:0000AD F6F7F8F9FAFBFCFC
          .db 0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff
C:0000B1 FDFEFEFFFFFFFFFF
          .db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe
C:0000B5 FFFFFFFFFFFFFEFE
          .db 0xfd, 0xfc, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7
C:0000B9 FDFCFCFBFAF9F8F7
          .db 0xf6, 0xf5, 0xf3, 0xf2, 0xf0, 0xef, 0xed, 0xec
C:0000BD F6F5F3F2F0EFEDEC
          .db 0xea, 0xe8, 0xe6, 0xe4, 0xe2, 0xe0, 0xde, 0xdc
C:0000C1 EAE8E6E4E2E0DEDC
          .db 0xda, 0xd8, 0xd5, 0xd3, 0xd1, 0xce, 0xcc, 0xc9
C:0000C5 DAD8D5D3D1CECCC9
          .db 0xc7, 0xc4, 0xc1, 0xbf, 0xbc, 0xb9, 0xb6, 0xb3
C:0000C9 C7C4C1BFBCB9B6B3
          .db 0xb0, 0xae, 0xab, 0xa8, 0xa5, 0xa2, 0x9f, 0x9c
C:0000CD B0AEABA8A5A29F9C
          .db 0x98, 0x95, 0x92, 0x8f, 0x8c, 0x89, 0x86, 0x83
C:0000D1 9895928F8C898683
          .db 0x80, 0x7c, 0x79, 0x76, 0x73, 0x70, 0x6d, 0x6a
C:0000D5 807C797673706D6A
          .db 0x67, 0x63, 0x60, 0x5d, 0x5a, 0x57, 0x54, 0x51
C:0000D9 6763605D5A575451
          .db 0x4f, 0x4c, 0x49, 0x46, 0x43, 0x40, 0x3e, 0x3b
C:0000DD 4F4C494643403E3B
          .db 0x38, 0x36, 0x33, 0x31, 0x2e, 0x2c, 0x2a, 0x27
C:0000E1 383633312E2C2A27
          .db 0x25, 0x23, 0x21, 0x1f, 0x1d, 0x1b, 0x19, 0x17
C:0000E5 2523211F1D1B1917
          .db 0x15, 0x13, 0x12, 0x10, 0xf, 0xd, 0xc, 0xa
C:0000E9 151312100F0D0C0A
          .db 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x3
C:0000ED 0908070605040303
          .db 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0
C:0000F1 0201010000000000
          .db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1
C:0000F5 0000000000000101
          .db 0x2, 0x3, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8
C:0000F9 0203030405060708
          .db 0x9, 0xa, 0xc, 0xd, 0xf, 0x10, 0x12, 0x13
C:0000FD 090A0C0D0F101213
          .db 0x15, 0x17, 0x19, 0x1b, 0x1d, 0x1f, 0x21, 0x23
C:000101 1517191B1D1F2123
          .db 0x25, 0x27, 0x2a, 0x2c, 0x2e, 0x31, 0x33, 0x36
C:000105 25272A2C2E313336
          .db 0x38, 0x3b, 0x3e, 0x40, 0x43, 0x46, 0x49, 0x4c
C:000109 383B3E404346494C
          .db 0x4f, 0x51, 0x54, 0x57, 0x5a, 0x5d, 0x60, 0x63
C:00010D 4F5154575A5D6063
          .db 0x67, 0x6a, 0x6d, 0x70, 0x73, 0x76, 0x79, 0x7c
C:000111 676A6D707376797C
         ;三角波
          .db 0x7f, 0x81, 0x83, 0x85, 0x87, 0x89, 0x8b, 0x8d
C:000115 7F81838587898B8D
          .db 0x8f, 0x91, 0x93, 0x95, 0x97, 0x99, 0x9b, 0x9d
C:000119 8F91939597999B9D
          .db 0x9f, 0xa1, 0xa3, 0xa5, 0xa7, 0xa9, 0xab, 0xad
C:00011D 9FA1A3A5A7A9ABAD
          .db 0xaf, 0xb1, 0xb3, 0xb5, 0xb7, 0xb9, 0xbb, 0xbd
C:000121 AFB1B3B5B7B9BBBD
          .db 0xbf, 0xc1, 0xc3, 0xc5, 0xc7, 0xc9, 0xcb, 0xcd
C:000125 BFC1C3C5C7C9CBCD
          .db 0xcf, 0xd1, 0xd3, 0xd5, 0xd7, 0xd9, 0xdb, 0xdd
C:000129 CFD1D3D5D7D9DBDD
          .db 0xdf, 0xe1, 0xe3, 0xe5, 0xe7, 0xe9, 0xeb, 0xed
C:00012D DFE1E3E5E7E9EBED
          .db 0xef, 0xf1, 0xf3, 0xf5, 0xf7, 0xf9, 0xfb, 0xfd
C:000131 EFF1F3F5F7F9FBFD
          .db 0xff, 0xfd, 0xfb, 0xf9, 0xf7, 0xf5, 0xf3, 0xf1
C:000135 FFFDFBF9F7F5F3F1
          .db 0xef, 0xed, 0xeb, 0xe9, 0xe7, 0xe5, 0xe3, 0xe1
C:000139 EFEDEBE9E7E5E3E1
          .db 0xdf, 0xdd, 0xdb, 0xd9, 0xd7, 0xd5, 0xd3, 0xd1
C:00013D DFDDDBD9D7D5D3D1
          .db 0xcf, 0xcd, 0xcb, 0xc9, 0xc7, 0xc5, 0xc3, 0xc1
C:000141 CFCDCBC9C7C5C3C1
          .db 0xbf, 0xbd, 0xbb, 0xb9, 0xb7, 0xb5, 0xb3, 0xb1
C:000145 BFBDBBB9B7B5B3B1
          .db 0xaf, 0xad, 0xab, 0xa9, 0xa7, 0xa5, 0xa3, 0xa1
C:000149 AFADABA9A7A5A3A1
          .db 0x9f, 0x9d, 0x9b, 0x99, 0x97, 0x95, 0x93, 0x91
C:00014D 9F9D9B9997959391
          .db 0x8f, 0x8d, 0x8b, 0x89, 0x87, 0x85, 0x83, 0x81
C:000151 8F8D8B8987858381
          .db 0x7f, 0x7d, 0x7b, 0x79, 0x77, 0x75, 0x73, 0x71
C:000155 7F7D7B7977757371
          .db 0x6f, 0x6d, 0x6b, 0x69, 0x67, 0x65, 0x63, 0x61
C:000159 6F6D6B6967656361
          .db 0x5f, 0x5d, 0x5b, 0x59, 0x57, 0x55, 0x53, 0x51
C:00015D 5F5D5B5957555351
          .db 0x4f, 0x4d, 0x4b, 0x49, 0x47, 0x45, 0x43, 0x41
C:000161 4F4D4B4947454341
          .db 0x3f, 0x3d, 0x3b, 0x39, 0x37, 0x35, 0x33, 0x31
C:000165 3F3D3B3937353331
          .db 0x2f, 0x2d, 0x2b, 0x29, 0x27, 0x25, 0x23, 0x21
C:000169 2F2D2B2927252321
          .db 0x1f, 0x1d, 0x1b, 0x19, 0x17, 0x15, 0x13, 0x11
C:00016D 1F1D1B1917151311
          .db 0xf, 0xd, 0xb, 0x9, 0x7, 0x5, 0x3, 0x1
C:000171 0F0D0B0907050301
          .db 0x0, 0x2, 0x4, 0x6, 0x8, 0xa, 0xc, 0xe
C:000175 00020406080A0C0E
          .db 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e
C:000179 10121416181A1C1E
          .db 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e
C:00017D 20222426282A2C2E
          .db 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e
C:000181 30323436383A3C3E
          .db 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e
C:000185 40424446484A4C4E
          .db 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e
C:000189 50525456585A5C5E
          .db 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e
C:00018D 60626466686A6C6E
          .db 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e
C:000191 70727476787A7C7E
         ;
          Hz:
          .db 0x70
C:000195 7000 ; zero byte added


Segment usage:
   Code      :       406 words (812 bytes)
   Data      :         0 bytes
   EEPROM    :         0 bytes

Assembly completed with no errors.
